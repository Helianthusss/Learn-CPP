Thuật toán nhánh cận thường được dùng trong việc giải quyết các bài toán tối ưu
tổ hợp. Bài toán được phát biểu dưới dạng sau:
Tìm min { f(X) : XD }, với D = { X =(x1, x2,..,xn) A1A2 An: X thỏa mãn tính
chất P }.
• X D được gọi là một phương án của bài toán.
• Hàm f(X) được gọi là hàm mục tiêu của bài toán.
• Miền D được gọi là tập phương án của bài toán.
Để giải quyết bài toán trên, ta có thể dùng thuật toán quay lui duyệt các phần tử
XD, phần tử X* làm cho F(X*) đạt giá trị nhỏ nhất (lớn nhất) là phương án tối ưu của
bài toán. Thuật toán nhánh cận có thể giải được bài toán đặt ra nếu ta xây dựng được một
hàm g xác định trên tất cả phương án bộ phận cấp k của bài toán sao cho:
g(a1, a2, ..,ak)≤ min { f(X): XD, xi=ai, i=1, 2,..,k}
Nói cách khác, giá trị của hàm g tại phương án bộ phận cấp k là g(a1, a2,..,ak)
không vượt quá giá trị nhỏ nhất của hàm mục tiêu trên tập con các phương án.
D(a1, a2,..,ak) = { XD: xi = ai, i= 1, 2, .., k}
Giá trị của hàm g(a1, a2, ..,ak) là cận dưới của hàm mục tiêu trên tập D(a1,
a2,..,ak). Hàm g được gọi là hàm cận dưới, g(a1, a2, ..,ak) gọi là cận dưới của tập
D(a1,a2,..,ak).
Giả sử ta đã có hàm g. Để giảm bớt khối lượng duyệt trên tập phương án, bằng
thuật toán quay lui ta xác định được X* là phương án làm cho hàm mục tiêu có giá trị nhỏ
nhất trong số các phương án tìm được f* =f(X*). Ta gọi X* là phương án tốt nhất hiện có,
f* là kỷ lục hiện tại.
Nếu
f* < g(a1, a2,..,ak)
thì
f*< g(a1, a2,..,ak) ≤ min { f(X):XD, xi = ai, i=1, 2, ..,k}.
Điều này có nghĩa tập D(a1, a2,.., ak) chắc chắn không chứa phương án tối ưu.
Trong trường hợp này ta không cần phải triển khai phương án bộ phận (a1,a2,..,ak). Tập
D(a1,a2,..ak) cũng bị loại bỏ khỏi quá trình duyệt. Nhờ đó, số các phương án cần duyệt
nhỏ đi trong quá trình tìm kiếm. Thuật toán nhánh cận tổng quát được mô tả chi tiết trong
 
